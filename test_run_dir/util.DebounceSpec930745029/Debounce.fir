;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit Debounce : 
  module Debounce : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip btnU : UInt<1>, flip sw : UInt<8>, led : UInt<8>}
    
    reg _T : UInt<1>, clock @[Debounce.scala 13:38]
    _T <= io.btnU @[Debounce.scala 13:38]
    reg btnSync : UInt<1>, clock @[Debounce.scala 13:30]
    btnSync <= _T @[Debounce.scala 13:30]
    reg _T_1 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Debounce.scala 18:22]
    node tick = eq(_T_1, UInt<7>("h063")) @[Debounce.scala 19:20]
    node _T_2 = add(_T_1, UInt<1>("h01")) @[Debounce.scala 20:31]
    node _T_3 = tail(_T_2, 1) @[Debounce.scala 20:31]
    node _T_4 = mux(tick, UInt<1>("h00"), _T_3) @[Debounce.scala 20:15]
    _T_1 <= _T_4 @[Debounce.scala 20:9]
    reg btnDeb : UInt<1>, clock @[Debounce.scala 35:19]
    when tick : @[Debounce.scala 36:15]
      btnDeb <= btnSync @[Debounce.scala 37:12]
      skip @[Debounce.scala 36:15]
    reg _T_5 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Debounce.scala 25:22]
    when tick : @[Debounce.scala 26:14]
      node _T_6 = bits(_T_5, 1, 0) @[Debounce.scala 27:21]
      node _T_7 = cat(_T_6, btnDeb) @[Cat.scala 29:58]
      _T_5 <= _T_7 @[Debounce.scala 27:11]
      skip @[Debounce.scala 26:14]
    node _T_8 = bits(_T_5, 2, 2) @[Debounce.scala 29:9]
    node _T_9 = bits(_T_5, 1, 1) @[Debounce.scala 29:18]
    node _T_10 = and(_T_8, _T_9) @[Debounce.scala 29:13]
    node _T_11 = bits(_T_5, 2, 2) @[Debounce.scala 29:29]
    node _T_12 = bits(_T_5, 0, 0) @[Debounce.scala 29:38]
    node _T_13 = and(_T_11, _T_12) @[Debounce.scala 29:33]
    node _T_14 = or(_T_10, _T_13) @[Debounce.scala 29:23]
    node _T_15 = bits(_T_5, 1, 1) @[Debounce.scala 29:49]
    node _T_16 = bits(_T_5, 0, 0) @[Debounce.scala 29:58]
    node _T_17 = and(_T_15, _T_16) @[Debounce.scala 29:53]
    node btnFilter = or(_T_14, _T_17) @[Debounce.scala 29:43]
    reg _T_18 : UInt<1>, clock @[Debounce.scala 15:37]
    _T_18 <= btnFilter @[Debounce.scala 15:37]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[Debounce.scala 15:29]
    node risingEdge = and(btnFilter, _T_19) @[Debounce.scala 15:27]
    reg r1 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Debounce.scala 45:19]
    when risingEdge : @[Debounce.scala 46:21]
      node _T_20 = add(r1, UInt<1>("h01")) @[Debounce.scala 47:14]
      node _T_21 = tail(_T_20, 1) @[Debounce.scala 47:14]
      r1 <= _T_21 @[Debounce.scala 47:8]
      skip @[Debounce.scala 46:21]
    io.led <= r1 @[Debounce.scala 50:10]
    
